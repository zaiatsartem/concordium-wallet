import com.android.build.gradle.internal.tasks.FinalizeBundleTask

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'

def SCHEME_BASE = "cryptoxmwallet"
def WC_SCHEME_BASE = "cryptox-wc"
def PROVIDER_AUTHORITY_BASE = "com.pioneeringtechventures.wallet.DataFileProvider"

def configurableSigningProperties = new Properties()
configurableSigningProperties.load(new FileInputStream(
        file(System.getenv("CONFIGURABLE_SIGNING_PROPERTIES_FILE") ?: "dev-signing.properties")
))

android {
    namespace "com.concordium.wallet"

    // This project uses semantic versioning
    // https://semver.org/
    def versionMajor = 1
    def versionMinor = 14
    def versionPatch = 0
    def versionMeta = "-qa.1"
    def versionCodeIncremental = 1465

    defaultConfig {
        applicationId "com.pioneeringtechventures.wallet"

        //noinspection OldTargetApi
        targetSdk 35
        //noinspection GradleDependency
        compileSdk 35
        minSdk 26

        versionCode versionCodeIncremental
        versionName "${versionMajor}.${versionMinor}.${versionPatch}${versionMeta}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("boolean", "SHOW_GTU_DROP", "false")
        buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        buildConfigField("Long", "FAST_ACCOUNT_UPDATE_FREQUENCY_SEC", "5l")
        buildConfigField("boolean", "FAIL_IDENTITY_CREATION", "false")
        buildConfigField("boolean", "FORCE_NO_EMAIL_CLIENTS", "false")
        buildConfigField("boolean", "SHOW_NEWSFEED", "true")
        buildConfigField("String", "URL_NEWSFEED_ARTICLES_RSS", "\"https://concordium-new.webflow.io/cryptox-news-articles/rss.xml\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }

        firebaseAppDistribution {
            // This file is created by CI.
            serviceCredentialsFile = file("app-distribution-credentials.json")
        }
    }

    signingConfigs {
        configurable {
            storeFile file(configurableSigningProperties['storeFile'])
            storePassword configurableSigningProperties['storePassword']
            keyAlias configurableSigningProperties['keyAlias']
            keyPassword configurableSigningProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            debuggable false
            signingConfig signingConfigs.configurable
            // Unlocking requires vigilant testing.
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        flavorDimensions += "network"
    }

    productFlavors {
        // Unstable Concordium test network, fake funds and identities. No Spaceseven instance.
        stagenet {
            dimension "network"
            applicationIdSuffix ".stagenet"

            buildConfigField("String", "EXPORT_CHAIN", "\"staging\"")
            buildConfigField("String", "ENV_NAME", "\"staging\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"https://wallet-proxy.stagenet.concordium.com\"")
            buildConfigField("String", "URL_EXPLORER_BASE", "\"https://stagenet.ccdscan.io/\"")
            buildConfigField("String", "URL_NOTIFICATIONS_BASE", "\"https://notification-api.stagenet.concordium.com/api/\"")
            buildConfigField("String", "HOSTNAME_GRPC", "\"grpc.stagenet.concordium.com\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")

            def scheme = SCHEME_BASE + "-stagenet"
            buildConfigField("String", "SCHEME", "\"${scheme}\"")
            resValue "string", "scheme", "\"${scheme}\""

            resValue "string", "wc_scheme", "\"${WC_SCHEME_BASE + "-stagenet"}\""

            def providerAuthority = PROVIDER_AUTHORITY_BASE + "-stagenet"
            resValue "string", "PROVIDER_AUTHORITY", "\"${providerAuthority}\""
            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${providerAuthority}\"")

            // There is no Spaceseven instance for Stagenet.
            // This domain won't resolve.
            buildConfigField("String", "S7_DOMAIN", "\"https://stagenet.spaceseven.cloud\"")

            firebaseAppDistribution {
                appId = '1:124880082147:android:44ec3892cba12e73c7e1d6'
                groups = "concordium-team"
            }
        }

        // Public Concordium test network, fake funds and identities. Spaceseven stage.
        // It is called 'tstnet' because flavour names can't start with 'test'
        tstnet {
            dimension "network"
            applicationIdSuffix ".testnet"

            buildConfigField("String", "EXPORT_CHAIN", "\"testnet\"")
            buildConfigField("String", "ENV_NAME", "\"testnet\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"https://wallet-proxy.testnet.concordium.com\"")
            buildConfigField("String", "URL_EXPLORER_BASE", "\"https://testnet.ccdscan.io/\"")
            buildConfigField("String", "URL_NOTIFICATIONS_BASE", "\"https://notification-api.testnet.concordium.com/api/\"")
            buildConfigField("String", "HOSTNAME_GRPC", "\"grpc.testnet.concordium.com\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")

            def scheme = SCHEME_BASE + "-testnet"
            buildConfigField("String", "SCHEME", "\"${scheme}\"")
            resValue "string", "scheme", "\"${scheme}\""

            resValue "string", "wc_scheme", "\"${WC_SCHEME_BASE + "-testnet"}\""

            def providerAuthority = PROVIDER_AUTHORITY_BASE + "-testnet"
            resValue "string", "PROVIDER_AUTHORITY", "\"${providerAuthority}\""
            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${providerAuthority}\"")

            // Yes, stage. Spaceseven stage runs on Concordium Testnet.
            buildConfigField("String", "S7_DOMAIN", "\"https://stage.spaceseven.cloud\"")

            firebaseAppDistribution {
                appId = '1:124880082147:android:40bb3b4880d6aa92c7e1d6'
                groups = "concordium-team, spaceseven-team"
            }
        }

        // Public Concordium network, real funds and identities. Spaceseven production.
        mainnet {
            dimension "network"

            buildConfigField("String", "EXPORT_CHAIN", "\"mainnet\"")
            buildConfigField("String", "ENV_NAME", "\"production\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"https://wallet-proxy.mainnet.concordium.software\"")
            buildConfigField("String", "URL_EXPLORER_BASE", "\"https://ccdscan.io/\"")
            buildConfigField("String", "URL_NOTIFICATIONS_BASE", "\"https://notification-api.mainnet.concordium.software/api/\"")
            buildConfigField("String", "HOSTNAME_GRPC", "\"grpc.mainnet.concordium.software\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "false")

            def scheme = SCHEME_BASE
            buildConfigField("String", "SCHEME", "\"${scheme}\"")
            resValue "string", "scheme", "\"${scheme}\""

            resValue "string", "wc_scheme", "\"${WC_SCHEME_BASE}\""

            def providerAuthority = PROVIDER_AUTHORITY_BASE
            resValue "string", "PROVIDER_AUTHORITY", "\"${providerAuthority}\""
            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${providerAuthority}\"")

            buildConfigField("String", "S7_DOMAIN", "\"https://spaceseven.com\"")

            firebaseAppDistribution {
                appId = '1:124880082147:android:250469ea97158747c7e1d6'
                groups = "concordium-team, spaceseven-team"
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
            excludes += ['META-INF/INDEX.LIST']
            excludes += ['META-INF/DEPENDENCIES']
            excludes += ['META-INF/LICENSE.md']
            excludes += ['META-INF/NOTICE.md']
            excludes += ['META-INF/versions/**']
        }
        doNotStrip "**/*.so"
    }

    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }

    // Set meaningful names for build artifacts.
    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0].name
        def artifactName = "concordium-wallet-" +
                flavor + "-" +
                variant.buildType.name + "-" +
                variant.versionName

        // APK.
        variant.outputs.all {
            outputFileName = artifactName + ".apk"
        }

        // AAB.
        tasks.named("sign${variant.name.capitalize()}Bundle", FinalizeBundleTask) {
            File file = finalBundleFile.asFile.get()
            File finalFile = new File(file.parentFile, artifactName + ".aab")
            finalBundleFile.set(finalFile)
        }
    }
}

allprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KaptGenerateStubs).configureEach {
        kotlinOptions.jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Crypto library
    implementation project(":mobile_wallet_lib-release")


    // Version catalog migration
    implementation(libs.concordium.android.sdk) {
        exclude group: "org.bouncycastle"
        exclude group: "net.jcip"
    }
    implementation libs.bundles.android.core
    implementation libs.bundles.android.ui
    implementation libs.bundles.kotlin
    implementation libs.bundles.lifecycle
    implementation libs.androidx.biometric
    implementation libs.bundles.navigation
    implementation libs.bundles.room
    implementation libs.bundles.jackson
    implementation libs.bundles.networking
    implementation(platform libs.reown.bom)
    implementation libs.bundles.reown
    implementation(libs.ihsanbal.logging.interceptor) {
        exclude group: 'org.json', module: 'json'
    }
    // Scarlet Gson adapter required for Spaceseven wallet connection.
    implementation(libs.message.adapter.gson) {
        // Core must be excluded to avoid class duplication when using WalletConnect.
        exclude group: 'com.tinder.scarlet', module: 'scarlet-core'
    }
    implementation libs.bundles.push.notifications
    implementation libs.rxjava2
    implementation libs.hashing
    implementation libs.kotlin.bip39
    implementation libs.snackbar
    implementation libs.blurview
    implementation libs.browser.tabs
    implementation libs.swipetorefresh
    implementation libs.eventbus
    implementation libs.lottie.animation
    implementation libs.barcode
    implementation libs.in.app.review
    implementation libs.in.app.review.ktx
    implementation libs.dotsindicator
    implementation libs.glide
    kapt libs.glide.compiler
    kapt libs.lifecycle.common
    kapt libs.room.compiler
    kapt libs.lombock
    annotationProcessor libs.lombock

    androidTestImplementation libs.room.testing
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.core.testing
    testImplementation libs.junit
    testImplementation libs.testing.room
}

task printVersionName {
    group = "help"
    doLast {
        println android.defaultConfig.versionName
    }
}
